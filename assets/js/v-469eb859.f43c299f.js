(self.webpackChunktil=self.webpackChunktil||[]).push([[168],{7101:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>u});var e=a(6252);const p=(0,e.Wm)("h1",{id:"typescript-로-observer-pattern-만들기-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#typescript-로-observer-pattern-만들기-1"},"#"),(0,e.Uk)(" Typescript 로 Observer Pattern 만들기 -1-")],-1),t={href:"https://wanago.io/2020/01/20/javascript-design-patterns-observer-typescript/",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("자바스크립트 디자인패턴 - 옵저버"),o={href:"https://medium.com/@pagalvin/implement-the-observer-pattern-in-typescript-f0d4b05807f0",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("타입스크립트 옵저버 패턴"),r=(0,e.uE)('<h2 id="observer-pattern"><a class="header-anchor" href="#observer-pattern">#</a> Observer pattern</h2><p>옵저버 패턴의 핵심 원리는 event 에 대해 다양한 오브젝트를 notify 하기 위한 subscription 메커니즘을 정의하는 것이다. notified 오브젝트는 특정 이벤트에 관심이 있음을 명시적으로 state 해야한다. 이는 자바스크립트에서 <strong>일반적인 패턴</strong>이다. 따라서 원리를 이해할 필요가 있다.</p><h3 id="subject"><a class="header-anchor" href="#subject">#</a> Subject</h3><p>subject 는 옵저버 리스트를 갖고 있다. 또, 무언가와 communicate 하고 싶을 때 모든 옵저버들을 call 한다. 중복을 막기 위해 <code>Set</code>을 사용하자.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>Observer<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token operator">:</span> Observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">unsubscribe</span><span class="token punctuation">(</span>observer<span class="token operator">:</span> Observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">notify</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="observer"><a class="header-anchor" href="#observer">#</a> Observer</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MyObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>\n    <span class="token function">update</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="예시"><a class="header-anchor" href="#예시">#</a> 예시</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsubject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n \nsubject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',10),u={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[(0,e.Wm)("a",t,[c,(0,e.Wm)(a)]),(0,e.Wm)("a",o,[l,(0,e.Wm)(a)])])]),r],64)}}},9531:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-469eb859",path:"/2021/04/13/tsobserverpattern.html",title:"Typescript 로 Observer Pattern 만들기 -1-",lang:"ko-KR",frontmatter:{permalinkPattern:"/:year/:month/:day/:slug.html",sidebar:"auto"},excerpt:"",headers:[{level:2,title:"Observer pattern",slug:"observer-pattern",children:[{level:3,title:"Subject",slug:"subject",children:[]},{level:3,title:"Observer",slug:"observer",children:[]}]},{level:2,title:"예시",slug:"예시",children:[]}],filePathRelative:"_posts/202104/2021-04-13-tsobserverpattern.md",git:{updatedTime:1618312226e3}}}}]);