(self.webpackChunktil=self.webpackChunktil||[]).push([[5435],{3094:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>S});var p=a(6252);const t=(0,p.uE)('<h1 id="typescript-에서-typeof-사용하기"><a class="header-anchor" href="#typescript-에서-typeof-사용하기">#</a> typescript 에서 <code>typeof</code> 사용하기</h1><h2 id="문제"><a class="header-anchor" href="#문제">#</a> 문제</h2><ul><li>typescript 에서는 <code>typeof</code> operator 로 비교 시, 반환값을 변수에 저장된 값과 비교하는 것이 무의미하다.</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> StringType <span class="token operator">=</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">checkType</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Type &#39;string | string[]&#39; is not assignable to type &#39;string&#39;.</span>\n    <span class="token comment">// Type &#39;string[]&#39; is not assignable to type &#39;string&#39;.(2322)</span>\n    dom<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> StringType <span class="token operator">?</span> val <span class="token operator">:</span> val<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="performance"><a class="header-anchor" href="#performance">#</a> Performance</h2>',5),e=(0,p.Uk)("또, "),o={href:"https://jsben.ch/gFOmr",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("100 번 돌렸을 때 성능차이"),l=(0,p.Uk)("를 살펴보면 평균적으로 3~5% 차이가 난다. 프로그램 규모가 커지면 커질 수록 typescript 형식으로 비교하는 것은 "),r=(0,p.Wm)("strong",null,"유의미한 성능차이",-1),i=(0,p.Uk)("를 보일 수 있다."),u=(0,p.Wm)("h2",{id:"해결방안"},[(0,p.Wm)("a",{class:"header-anchor",href:"#해결방안"},"#"),(0,p.Uk)(" 해결방안")],-1),k={href:"https://www.typescriptlang.org/docs/handbook/2/narrowing",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("typescript docs narrowing"),m=(0,p.Uk)(" 항목을 살펴보면 "),b=(0,p.Wm)("code",null,"literal",-1),g=(0,p.Uk)(" 로 비교하는 것을 권장한다."),y={href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("usertype predicate"),h=(0,p.Uk)(" 를 응용할 수 있다."),w=(0,p.Uk)("또, "),v={href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#typeof-type-guards",target:"_blank",rel:"noopener noreferrer"},W=(0,p.Uk)("deprecated 된 doc"),U=(0,p.Uk)("를 살펴보면 function "),x=(0,p.Wm)("code",null,"isNumber",-1),q=(0,p.Uk)("등의 function을 통해 비교한다."),T=(0,p.Wm)("li",null,"연산 시 function call stack 이 한번 더 쌓이지만 이러한 방법이 가장 바람직한 듯 보인다.",-1),E=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>padding <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> padding <span class="token operator">+</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Expected string or number, got &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>padding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="결론"><a class="header-anchor" href="#결론">#</a> 결론</h2><ul><li>현재로는 typescript 환경에서, comparison 시 literal 을 사용하는 것이 어쩔 수 없이 가장 바람직하다.</li><li>이를 위해선 어디서든 쓰이는 common function을 만드는 것이 가장 좋다.</li><li>얼른 typescript 가 이런 점을 type 오류로 잡지 않았으면 좋겠다.</li></ul>',3),S={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("p",null,[e,(0,p.Wm)("a",o,[c,(0,p.Wm)(a)]),l,r,i]),u,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",k,[d,(0,p.Wm)(a)]),m,b,g]),(0,p.Wm)("li",null,[(0,p.Wm)("a",y,[f,(0,p.Wm)(a)]),h]),(0,p.Wm)("li",null,[w,(0,p.Wm)("a",v,[W,(0,p.Wm)(a)]),U,x,q]),T]),E],64)}}},9e3:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-1907667f",path:"/2021/04/20/typeofintypescript.html",title:"typescript 에서 `typeof` 사용하기",lang:"ko-KR",frontmatter:{permalinkPattern:"/:year/:month/:day/:slug.html",sidebar:"auto"},excerpt:"",headers:[{level:2,title:"문제",slug:"문제",children:[]},{level:2,title:"Performance",slug:"performance",children:[]},{level:2,title:"해결방안",slug:"해결방안",children:[]},{level:2,title:"결론",slug:"결론",children:[]}],filePathRelative:"_posts/202104/2021-04-20-typeofintypescript.md",git:{updatedTime:1618861716e3}}}}]);