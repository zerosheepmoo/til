(self.webpackChunktil=self.webpackChunktil||[]).push([[964],{5172:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>x});var e=a(6252);const t=(0,e.Wm)("h1",{id:"이벤트를-생성하고-방아쇠를-당기기"},[(0,e.Wm)("a",{class:"header-anchor",href:"#이벤트를-생성하고-방아쇠를-당기기"},"#"),(0,e.Uk)(" 이벤트를 생성하고 방아쇠를 당기기")],-1),p={href:"https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("MDN 원본"),c=(0,e.uE)('<ul><li>synthetic events(합성 이벤트) 에 대해 다룬다.</li></ul><h2 id="custom-event-생성하기"><a class="header-anchor" href="#custom-event-생성하기">#</a> Custom Event 생성하기</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Listen for the event.</span>\nelem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Dispatch the event.</span>\nelem<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',3),l={href:"https://developer.mozilla.org/en-US/docs/Web/API/Event",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("Event API"),i={href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("EventTarget.dispatchEvent()"),k=(0,e.Wm)("h2",{id:"custom-data-추가하기-customevent"},[(0,e.Wm)("a",{class:"header-anchor",href:"#custom-data-추가하기-customevent"},"#"),(0,e.Uk)(" Custom Data 추가하기 - "),(0,e.Wm)("code",null,"CustomEvent()")],-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("CustomEvent API"),d=(0,e.Wm)("li",null,"이벤트 오브젝트에 더 많은 데이터를 전달하고 싶을 경우 사용한다.",-1),v=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> detail<span class="token operator">:</span> elem<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>time <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// e 에 만든 커스텀 이벤트가 passed 될 경우</span>\n<span class="token keyword">function</span> <span class="token function">eventHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The time is: &#39;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="옛날에는"><a class="header-anchor" href="#옛날에는">#</a> 옛날에는</h2>',3),g={href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("document.createEvent()"),f=(0,e.Wm)("li",null,"java 에서 inspiring",-1),E=(0,e.Wm)("li",null,"init - add - dispatch",-1),w=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Create the event.</span>\n<span class="token keyword">const</span> event <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">&#39;Event&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Define that the event name is &#39;build&#39;.</span>\nevent<span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Listen for the event.</span>\nelem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// e.target matches elem</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// target can be any Element or other EventTarget.</span>\nelem<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="이벤트-버블링"><a class="header-anchor" href="#이벤트-버블링">#</a> 이벤트 버블링</h2><ul><li>child 에서 trigger, ancestor 에서 catch</li><li>아래 예시는 <code>e.target.dispatchEvent()</code> 가 bubbling 되어서 EventTarget 가 form element 가 되어 awesome event 가 trigger 된다.</li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Create a new event, allow bubbling, and provide any data</span>\n<span class="token comment">// you want to pass to the &quot;detail&quot; property</span>\n<span class="token keyword">const</span> eventAwesome <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&#39;awesome&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  bubbles<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  detail<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">text</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> textarea<span class="token punctuation">.</span>value <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// The form element listens for the custom &quot;awesome&quot; event and then consoles</span>\n<span class="token comment">// the output of the passed text() method</span>\nform<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;awesome&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// As the user types, the textarea inside the form </span>\n<span class="token comment">// dispatches/triggers the event to fire, and uses itself as the starting point</span>\ntextarea<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>eventAwesome<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="built-in-event-트리거"><a class="header-anchor" href="#built-in-event-트리거">#</a> built-in event 트리거</h2>',6),W={href:"https://media.prod.mdn.mozit.cloud/samples/domref/dispatchEvent.html",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("예제"),j=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">simulateClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    view<span class="token operator">:</span> window<span class="token punctuation">,</span>\n    bubbles<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    cancelable<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> cb <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;checkbox&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> cancelled <span class="token operator">=</span> <span class="token operator">!</span>cb<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// A handler called preventDefault.</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;cancelled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// None of the handlers called preventDefault.</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;not cancelled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',1),x={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[(0,e.Wm)("a",p,[o,(0,e.Wm)(a)])])]),c,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",l,[u,(0,e.Wm)(a)])]),(0,e.Wm)("li",null,[(0,e.Wm)("a",i,[r,(0,e.Wm)(a)])])]),k,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",m,[b,(0,e.Wm)(a)])]),d]),v,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",g,[h,(0,e.Wm)(a)])]),f,E]),w,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[(0,e.Wm)("a",W,[y,(0,e.Wm)(a)])])]),j],64)}}},8953:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-157ea3fe",path:"/2021/04/22/createtriggerevent.html",title:"이벤트를 생성하고 방아쇠를 당기기",lang:"ko-KR",frontmatter:{permalinkPattern:"/:year/:month/:day/:slug.html",sidebar:"auto"},excerpt:"",headers:[{level:2,title:"Custom Event 생성하기",slug:"custom-event-생성하기",children:[]},{level:2,title:"Custom Data 추가하기 - CustomEvent()",slug:"custom-data-추가하기-customevent",children:[]},{level:2,title:"옛날에는",slug:"옛날에는",children:[]},{level:2,title:"이벤트 버블링",slug:"이벤트-버블링",children:[]},{level:2,title:"built-in event 트리거",slug:"built-in-event-트리거",children:[]}],filePathRelative:"_posts/202104/2021-04-22-createtriggerevent.md",git:{updatedTime:1619087384e3}}}}]);