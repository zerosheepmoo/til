(self.webpackChunktil=self.webpackChunktil||[]).push([[95],{637:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>x});var a=t(6252);const s=(0,a.Wm)("h1",{id:"javascript-object"},[(0,a.Wm)("a",{class:"header-anchor",href:"#javascript-object"},"#"),(0,a.Uk)(" Javascript Object")],-1),o={href:"https://tc39.es/ecma262/#sec-objects",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("ECMAScript 2022 Object"),l=(0,a.uE)('<h2 id="basics"><a class="header-anchor" href="#basics">#</a> Basics</h2><ul><li>ECMAScript 는 class definition syntax를 포함하고 있어도, <strong>class-based 가 아니</strong>다.</li><li>각 <a href="#constructor">constructor</a> 는 <code>prototype</code> 이라는 property 를 갖는데, 이는 prototype-based <em>inheritance</em> 와 <em>shared properties</em> 에 사용된다.</li><li><code>new</code> expression 을 통해 constructor 가 invoke 되는데, <code>new</code> 없이는 constructor 마다 다른 과정으로 invoke 된다. <ul><li>예: <code>new Date()</code>(Date object) 와 <code>Date()</code>(string)</li></ul></li></ul><h3 id="prototype-chain"><a class="header-anchor" href="#prototype-chain">#</a> Prototype Chain</h3><ul><li>constructor 로 생성된 오브젝트는 <em>prototype</em> 이라는 그 오브젝트의 constructor의 <code>prototype</code> property를 암시적으로 레퍼런스한다.</li><li>또, 프로토타입은 그의 프로토타입(null이 아닌)을 암시적으로 레퍼런스한다. 그리고 반복.</li><li>이를 우리가 <em>prototype chain</em> 이라 한다.</li><li>첫번째 mention된 오브젝트를 검사한 뒤, 만약에 해당 이름의 프로퍼티가 있으면 reference 가 refer하고, 없다면 해당 오브젝트의 프로토타입에 해당 이름의 프로퍼티가 있는지 검사한다. 이를 반복한다.</li></ul>',4),r={class:"custom-container tip"},i=(0,a.Wm)("p",{class:"custom-container-title"},"TIP",-1),p=(0,a.Uk)("javascript.info 의 "),u={href:"https://javascript.info/function-prototype#default-f-prototype-constructor-property",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("F.prototype"),b=(0,a.Uk)(" 과 "),h={href:"https://javascript.info/native-prototypes",target:"_blank",rel:"noopener noreferrer"},m=(0,a.Uk)("native prototype"),k=(0,a.Uk)(" 참조."),j=(0,a.uE)('<h3 id="function-object"><a class="header-anchor" href="#function-object">#</a> <code>function object</code>?</h3><ul><li>[[call]] internal method 를 지원하는 object</li></ul><h3 id="constructor"><a class="header-anchor" href="#constructor">#</a> <code>constructor</code>?</h3><ul><li>[[construct]] internal method 를 지원하는 object</li><li>[[construct]]를 지원하면 [[call]]도 반드시 지원</li><li>따라서, <strong>모든 constructor는 function object</strong> 다.</li></ul><h3 id="additional-essential-internal-methods-of-function-objects"><a class="header-anchor" href="#additional-essential-internal-methods-of-function-objects">#</a> Additional Essential Internal Methods of Function Objects</h3><table><thead><tr><th style="text-align:center;">Internal Method</th><th style="text-align:center;">Signature</th><th>Description</th></tr></thead><tbody><tr><td style="text-align:center;"><p>[[Call]]</p></td><td style="text-align:center;"><p>(<code>any</code>, a List of <code>any</code>) → <code>any</code></p></td><td><ul><li>code associated with this object를 실행.</li><li>function call expression으로 invoke.</li><li>argument는 <strong>this</strong> 값과 call expression 에 의해 function 에 pass 된 argument List</li><li>이 메소드를 갖고 있으면 <em>callable</em> 하다.</li></ul></td></tr><tr><td style="text-align:center;"><p>[[Construct]]</p></td><td style="text-align:center;"><p>(a List of <code>any</code>, <code>Object</code>) → <code>Object</code></p></td><td><ul><li>오브젝트 생성</li><li><code>new</code> 연산자 또는 <strong>super</strong> 호출로 invoke.</li><li>첫번째 argument: constructor invocation 또는 super call 의 argument List</li><li>두번째 argument: <code>new</code> 연산자가 처음에 적용된 객체</li><li>이 메소드를 구현하고 있으면 <strong>constructor</strong></li></ul></td></tr></tbody></table><ul><li>function object 는 constructor 일 필요가 없으며, 마찬가지로 non-constructor function object 는 [[Construct]] internal method가 없다.</li></ul><h2 id="initializer"><a class="header-anchor" href="#initializer">#</a> Initializer</h2>',8),f={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",target:"_blank",rel:"noopener noreferrer"},g=(0,a.Uk)("Object initializer MDN"),v=(0,a.Wm)("ul",null,[(0,a.Wm)("li",null,[(0,a.Wm)("code",null,"new Object()"),(0,a.Uk)(", "),(0,a.Wm)("code",null,"Object.create()"),(0,a.Uk)(", Object literal notation 중 하나 사용")])],-1),y=(0,a.Wm)("h3",{id:"object-constructor"},[(0,a.Wm)("a",{class:"header-anchor",href:"#object-constructor"},"#"),(0,a.Uk)(" Object constructor")],-1),O={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object",target:"_blank",rel:"noopener noreferrer"},_=(0,a.Uk)("object constructor MDN"),W=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 빈 오브젝트</span>\n<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>\n<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>Object.prototype</code> 을 <code>__proto__</code> 로 지정</li></ul><h3 id="object-create"><a class="header-anchor" href="#object-create">#</a> <code>Object.create()</code></h3>',3),w={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create",target:"_blank",rel:"noopener noreferrer"},U=(0,a.Uk)("Object.create() MDN"),S=(0,a.uE)('<ul><li>parameter 에는 생성될 오브젝트의 <code>__proto__</code> 가 될 객체가 들어감</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  isHuman<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> me <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// Object { isHuman: true }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// Object.prototype</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="object-literal-notation-vs-json"><a class="header-anchor" href="#object-literal-notation-vs-json">#</a> Object literal notation vs JSON</h3><ul><li>JavaScript Object Notation (JSON).</li><li>둘은 같지 않다.</li></ul><h2 id="덧붙여"><a class="header-anchor" href="#덧붙여">#</a> 덧붙여</h2><p>나중에 ECMAScript 관련 카테고리를 만들어야겠다.</p><h2 id="summary"><a class="header-anchor" href="#summary">#</a> summary</h2><ul><li>ECMAScript는 prototype-based이다.</li><li>모든 Constructor는 function object이다.</li><li>[[construct]]를 구현하는 오브젝트는 constructor다.</li><li>Object Initializer는 Object.create, Object constructor, Object literal로 3가지이다.</li></ul>',8),x={render:function(e,n){const t=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[s,(0,a.Wm)("blockquote",null,[(0,a.Wm)("p",null,[(0,a.Wm)("a",o,[c,(0,a.Wm)(t)])])]),l,(0,a.Wm)("div",r,[i,(0,a.Wm)("p",null,[p,(0,a.Wm)("a",u,[d,(0,a.Wm)(t)]),b,(0,a.Wm)("a",h,[m,(0,a.Wm)(t)]),k])]),j,(0,a.Wm)("blockquote",null,[(0,a.Wm)("p",null,[(0,a.Wm)("a",f,[g,(0,a.Wm)(t)])])]),v,y,(0,a.Wm)("blockquote",null,[(0,a.Wm)("p",null,[(0,a.Wm)("a",O,[_,(0,a.Wm)(t)])])]),W,(0,a.Wm)("blockquote",null,[(0,a.Wm)("p",null,[(0,a.Wm)("a",w,[U,(0,a.Wm)(t)])])]),S],64)}}},4173:(e,n,t)=>{"use strict";t.r(n),t.d(n,{data:()=>a});const a={key:"v-08d525b7",path:"/2021/04/14/jsobject.html",title:"Javascript Object",lang:"ko-KR",frontmatter:{permalinkPattern:"/:year/:month/:day/:slug.html",sidebar:"auto"},excerpt:"",headers:[{level:2,title:"Basics",slug:"basics",children:[{level:3,title:"Prototype Chain",slug:"prototype-chain",children:[]},{level:3,title:"function object?",slug:"function-object",children:[]},{level:3,title:"constructor?",slug:"constructor",children:[]},{level:3,title:"Additional Essential Internal Methods of Function Objects",slug:"additional-essential-internal-methods-of-function-objects",children:[]}]},{level:2,title:"Initializer",slug:"initializer",children:[{level:3,title:"Object constructor",slug:"object-constructor",children:[]},{level:3,title:"Object.create()",slug:"object-create",children:[]},{level:3,title:"Object literal notation vs JSON",slug:"object-literal-notation-vs-json",children:[]}]},{level:2,title:"덧붙여",slug:"덧붙여",children:[]},{level:2,title:"summary",slug:"summary",children:[]}],filePathRelative:"_posts/202104/2021-04-14-jsobject.md",git:{updatedTime:1618405177e3}}}}]);