(self.webpackChunktil=self.webpackChunktil||[]).push([[3257],{6532:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>bn});var p=a(6252);const t=(0,p.Wm)("h1",{id:"런타임"},[(0,p.Wm)("a",{class:"header-anchor",href:"#런타임"},"#"),(0,p.Uk)(" 런타임")],-1),e={href:"https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("doc.deno.land"),c=(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,"모든 런타임 함수 (Web APIs + Deno global) 문서")],-1),l=(0,p.Wm)("li",null,[(0,p.Wm)("a",{href:"#web-platform-apis"},"웹 플랫폼 APIs"),(0,p.Uk)(": "),(0,p.Wm)("code",null,"fetch"),(0,p.Uk)(" 등")],-1),u={href:"https://github.com/denoland/deno/blob/v1.9.2/cli/dts/lib.deno.ns.d.ts",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("global Deno namespace: "),i=(0,p.Wm)("code",null,"lib.deno.ns.d.ts",-1),k=(0,p.Wm)("li",null,"reading from files",-1),d=(0,p.Wm)("li",null,"opening TCP sockets",-1),m=(0,p.Wm)("li",null,"serving HTTP",-1),b=(0,p.Wm)("li",null,"executing subprocesses",-1),g={href:"https://doc.deno.land/https/raw.githubusercontent.com/denoland/deno/main/cli/dts/lib.deno.ns.d.ts",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("etc"),h=(0,p.Wm)("h2",{id:"stability"},[(0,p.Wm)("a",{class:"header-anchor",href:"#stability"},"#"),(0,p.Uk)(" Stability")],-1),y=(0,p.Wm)("li",null,[(0,p.Wm)("code",null,"1.0"),(0,p.Uk)("에선 "),(0,p.Wm)("code",null,"Deno"),(0,p.Uk)(" namespace 가 stable")],-1),v={href:"https://doc.deno.land/https/raw.githubusercontent.com/denoland/deno/main/cli/dts/lib.deno.unstable.d.ts",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("unstable feature"),f=(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,"security review 가 끝나지 않았음"),(0,p.Wm)("li",null,"API 바뀔 수 있음"),(0,p.Wm)("li",null,"not ready for production")],-1),W={href:"https://deno.land/std@0.95.0",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("standard module"),P=(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,"특별한 플래그는 필요없지만 unstable 한 점 유의")],-1),U=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># unstable 허용하기</span>\ndeno run --unstable mod_which_uses_unstable_stuff.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="program-lifecycle"><a class="header-anchor" href="#program-lifecycle">#</a> Program Lifecycle</h2><ul><li><code>load</code> 와 <code>unload</code>: 브라우저 라이프사이클과 호환 <ul><li>전자는 비동기 후자는 동기</li><li>이벤트를 취소할 수는 없음</li></ul></li></ul><details class="custom-container details"><summary>예시</summary><ul><li><code>window.addEventListener</code> 사용</li><li><code>window.onload/window.onunload</code> 사용</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>\n<span class="token keyword">import</span> <span class="token string">&quot;./imported.ts&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> event in event handler (main)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;unload&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> event in onload function (main)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>onunload <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> event in onunload function (main)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;log from main script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// imported.ts</span>\n<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> event in event handler (imported)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;unload&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> event in onload function (imported)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>onunload <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> event in onunload function (imported)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;log from imported script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ deno run main.ts\nlog from imported script\nlog from main script\ngot load event <span class="token keyword">in</span> event handler <span class="token punctuation">(</span>imported<span class="token punctuation">)</span>\ngot load event <span class="token keyword">in</span> event handler <span class="token punctuation">(</span>main<span class="token punctuation">)</span>\ngot load event <span class="token keyword">in</span> onload <span class="token keyword">function</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span>\ngot unload event <span class="token keyword">in</span> event handler <span class="token punctuation">(</span>imported<span class="token punctuation">)</span>\ngot unload event <span class="token keyword">in</span> event handler <span class="token punctuation">(</span>main<span class="token punctuation">)</span>\ngot unload event <span class="token keyword">in</span> onunload <span class="token keyword">function</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><code>window.addEventListener</code>는 다 실행</li><li><code>window.onload</code> 는 <code>imported.ts</code>에서 override</li></ul></details><h2 id="permission-apis"><a class="header-anchor" href="#permission-apis">#</a> Permission APIs</h2><h3 id="permission-descriptors"><a class="header-anchor" href="#permission-descriptors">#</a> Permission descriptors</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// --allow-read=/foo/bar. </span>\n<span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo/bar&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Global write permission.</span>\n<span class="token keyword">const</span> desc1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;write&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Write permission to `$PWD/foo/bar`.</span>\n<span class="token keyword">const</span> desc2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;write&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;foo/bar&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Global net permission.</span>\n<span class="token keyword">const</span> desc3 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;net&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Net permission to 127.0.0.1:8000.</span>\n<span class="token keyword">const</span> desc4 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;net&quot;</span><span class="token punctuation">,</span> host<span class="token operator">:</span> <span class="token string">&quot;127.0.0.1:8000&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token comment">// High-resolution time permission.</span>\n<span class="token keyword">const</span> desc5 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;hrtime&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="query-permissions"><a class="header-anchor" href="#query-permissions">#</a> Query Permissions</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run --allow-read=/foo main.ts</span>\n\n<span class="token keyword">const</span> desc1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>desc1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionStatus { state: &quot;granted&quot; }</span>\n\n<span class="token keyword">const</span> desc2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo/bar&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>desc2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionStatus { state: &quot;granted&quot; }</span>\n\n<span class="token keyword">const</span> desc3 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/bar&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>desc3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionStatus { state: &quot;prompt&quot; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="permission-states"><a class="header-anchor" href="#permission-states">#</a> Permission states</h3><ul><li>granted (by CLI)</li><li>prompt (default / have not granted)</li><li>denied (explicitly refused)</li></ul><h3 id="permission-strength"><a class="header-anchor" href="#permission-strength">#</a> Permission strength</h3>',12),D=(0,p.Wm)("li",null,[(0,p.Wm)("a",{href:"#query-permissions"},"위의 예시"),(0,p.Uk)("에서 이어지는 내용")],-1),T=(0,p.Wm)("code",null,"desc1",-1),E=(0,p.Uk)(" is "),L={href:"https://www.w3.org/TR/permissions/#ref-for-permissiondescriptor-stronger-than",target:"_blank",rel:"noopener noreferrer"},I=(0,p.Uk)("stronger than"),R=(0,p.Wm)("code",null,"desc2",-1),S=(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Uk)("If desc1 queries to "),(0,p.Wm)("code",null,'{ state: "granted" }'),(0,p.Uk)(" then so must desc2.")]),(0,p.Wm)("li",null,[(0,p.Uk)("If desc2 queries to "),(0,p.Wm)("code",null,'{ state: "denied" }'),(0,p.Uk)(" then so must desc1.")])],-1),_=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> desc1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;write&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token comment">// is stronger than</span>\n<span class="token keyword">const</span> desc2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;write&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> desc3 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;net&quot;</span><span class="token punctuation">,</span> host<span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token comment">// is stronger than</span>\n<span class="token keyword">const</span> desc4 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;net&quot;</span><span class="token punctuation">,</span> host<span class="token operator">:</span> <span class="token string">&quot;127.0.0.1:8000&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="request-permissions"><a class="header-anchor" href="#request-permissions">#</a> Request Permissions</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run main.ts</span>\n\n<span class="token keyword">const</span> desc1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> status1 <span class="token operator">=</span> <span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>desc1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ⚠️ Deno requests read access to &quot;/foo&quot;. Grant? [g/d (g = grant, d = deny)] g</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionStatus { state: &quot;granted&quot; }</span>\n\n<span class="token keyword">const</span> desc2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/bar&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> status2 <span class="token operator">=</span> <span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>desc2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ⚠️ Deno requests read access to &quot;/bar&quot;. Grant? [g/d (g = grant, d = deny)] d</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionStatus { state: &quot;denied&quot; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>The request for <code>desc1</code> was granted <ul><li>so its new status is returned</li><li>execution will continue as if <code>--allow-read=/foo was specified</code> on the CLI.</li></ul></li><li>The request for <code>desc2</code> was denied <ul><li>so its permission state is downgraded from &quot;prompt&quot; to &quot;denied&quot;</li></ul></li></ul><h3 id="revoke-permissions"><a class="header-anchor" href="#revoke-permissions">#</a> Revoke permissions</h3><ul><li>Downgrade a permission from &quot;granted&quot; to &quot;prompt&quot;.</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run --allow-read=/foo main.ts</span>\n\n<span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionStatus { state: &quot;prompt&quot; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>cli 에서 granted 된 permission 의 partial 은 revoked 안됨.</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run --allow-read=/foo main.ts</span>\n\n<span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo/bar&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionStatus { state: &quot;granted&quot; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>Specifying <code>--allow-read=/foo,/bar</code> on the CLI initializes this set to</li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Granting <code>{ name: &quot;write&quot;, path: &quot;/foo&quot; }</code> updates the set to</li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;write&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run --allow-read=/foo main.ts</span>\n\n<span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo/bar&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Insufficient.</span>\n<span class="token comment">// PermissionStatus { state: &quot;granted&quot; }</span>\n\n<span class="token keyword">const</span> strongDesc <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span>strongDesc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Good.</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionStatus { state: &quot;prompt&quot; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="web-platform-apis"><a class="header-anchor" href="#web-platform-apis">#</a> Web Platform APIs</h2><h3 id="fetch-api"><a class="header-anchor" href="#fetch-api">#</a> <code>fetch</code> API</h3>',16),j={href:"https://fetch.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},A=(0,p.Uk)("spec"),C={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer"},H=(0,p.Uk)("mdn"),$=(0,p.Wm)("li",null,"cookie jar 없음",-1),F=(0,p.Wm)("li",null,"현재 origin 개념 없음",-1),G=(0,p.Wm)("li",null,[(0,p.Wm)("code",null,"opaqueredirect"),(0,p.Uk)(" 대신 "),(0,p.Wm)("code",null,"basic"),(0,p.Uk)("을 return")],-1),z=(0,p.Wm)("h3",{id:"customevent-eventtarget-and-eventlistener"},[(0,p.Wm)("a",{class:"header-anchor",href:"#customevent-eventtarget-and-eventlistener"},"#"),(0,p.Uk)(),(0,p.Wm)("code",null,"CustomEvent"),(0,p.Uk)(", "),(0,p.Wm)("code",null,"EventTarget"),(0,p.Uk)(" and "),(0,p.Wm)("code",null,"EventListener")],-1),B={href:"https://dom.spec.whatwg.org/#events",target:"_blank",rel:"noopener noreferrer"},O=(0,p.Uk)("spec"),N={href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget",target:"_blank",rel:"noopener noreferrer"},Q=(0,p.Uk)("mdn"),K=(0,p.Wm)("li",null,"bubble 이 안됨 (deno 가 dom hierarchy 가 없어서임)",-1),M=(0,p.uE)('<h3 id="other-apis"><a class="header-anchor" href="#other-apis">#</a> Other APIs</h3><ul><li>Blob</li><li>Console</li><li>FormData</li><li>Performance</li><li>setTimeout, setInterval, clearInterval</li><li>Streams API</li><li>URL</li><li>URLSearchParams</li><li>WebSocket</li></ul><h3 id="타입"><a class="header-anchor" href="#타입">#</a> 타입</h3>',3),Y={href:"https://github.com/denoland/deno/blob/v1.9.2/cli/dts/lib.deno.shared_globals.d.ts",target:"_blank",rel:"noopener noreferrer"},J=(0,p.Uk)("shared globals"),V={href:"https://github.com/denoland/deno/blob/v1.9.2/cli/dts/lib.deno.window.d.ts",target:"_blank",rel:"noopener noreferrer"},X=(0,p.Uk)("window"),Z={href:"https://github.com/denoland/deno/blob/v1.9.2/cli/dts/lib.deno.worker.d.ts",target:"_blank",rel:"noopener noreferrer"},nn=(0,p.Uk)("worker"),sn=(0,p.uE)('<h2 id="http-server-apis"><a class="header-anchor" href="#http-server-apis">#</a> HTTP Server APIs</h2><blockquote><p>1.9 이후, 아직 <code>unstable</code></p></blockquote><ul><li>port를 이미 사용하고 있을 수 있음 =&gt; try..catch</li><li><code>localhost</code> 에 bind, 원하지 않는 경우엔 <ul><li><code>transport: &quot;tcp&quot;</code>: 명시적인 ip</li><li><code>hostname</code> property: 호스트명</li></ul></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>TLS (HTTPS)</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">listenTls</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  port<span class="token operator">:</span> <span class="token number">8443</span><span class="token punctuation">,</span>\n  certFile<span class="token operator">:</span> <span class="token string">&quot;localhost.crt&quot;</span><span class="token punctuation">,</span>\n  keyFile<span class="token operator">:</span> <span class="token string">&quot;localhost.key&quot;</span><span class="token punctuation">,</span>\n  alpnProtocols<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;h2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http/1.1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="handling-connections"><a class="header-anchor" href="#handling-connections">#</a> Handling connections</h3><ul><li><code>Deno.Listener</code> 가 return <ul><li>which is an async iterable which yields up <code>Deno.Conn</code> connections</li></ul></li><li><code>.accept()</code></li><li><code>.close()</code></li><li><code>try...catch</code> 사용 추천 (for production, HTTPS)</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> conn <span class="token keyword">of</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...handle the connection...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> conn <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ... handle the connection ...</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// The listener has closed</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="serving-http"><a class="header-anchor" href="#serving-http">#</a> Serving HTTP</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> conn <span class="token keyword">of</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> httpConn <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">serveHttp</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> requestEvent <span class="token keyword">of</span> httpConn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ... handle requestEvent ...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><code>.nextRequest()</code></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> conn <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> httpConn <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">serveHttp</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> requestEvent <span class="token operator">=</span> <span class="token keyword">await</span> httpConn<span class="token punctuation">.</span><span class="token function">nextRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// ... handle requestEvent ...</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment">// the connection has finished</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// The listener has closed</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>In practice</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>conn<span class="token operator">:</span> Deno<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> httpConn <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">serveHttp</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> requestEvent <span class="token keyword">of</span> httpConn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ... handle requestEvent</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> conn <span class="token keyword">of</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">handle</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="http-requests-and-responses"><a class="header-anchor" href="#http-requests-and-responses">#</a> HTTP Requests and Responses</h3><ul><li>fetch API <code>Request</code>, <code>Response</code></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>conn<span class="token operator">:</span> Deno<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> httpConn <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">serveHttp</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> requestEvent <span class="token keyword">of</span> httpConn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>requestEvent<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">path: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>.respondWith()</code></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>conn<span class="token operator">:</span> Deno<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> httpConn <span class="token operator">=</span> Deno<span class="token punctuation">.</span><span class="token function">serveHttp</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> requestEvent <span class="token keyword">of</span> httpConn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> requestEvent<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="http-2-support"><a class="header-anchor" href="#http-2-support">#</a> HTTP/2 Support</h3>',22),an={href:"https://deno.land/manual/runtime/http_server_apis#http2-support",target:"_blank",rel:"noopener noreferrer"},pn=(0,p.Uk)("원문 참조"),tn=(0,p.Wm)("h2",{id:"location-api"},[(0,p.Wm)("a",{class:"header-anchor",href:"#location-api"},"#"),(0,p.Uk)(" Location API")],-1),en={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/location",target:"_blank",rel:"noopener noreferrer"},on=(0,p.Uk)("location mdn"),cn=(0,p.uE)('<ul><li>반드시 <code>--location &lt;href&gt;</code> 형태, global 은 에러, navigation 도 에러</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run --location https://example.com/path main.ts</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;https://example.com/path&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run main.ts</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// error: Uncaught ReferenceError: Access to &quot;location&quot;, run again with --location &lt;href&gt;.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run --location https://example.com/path main.ts</span>\n\nlocation<span class="token punctuation">.</span>pathname <span class="token operator">=</span> <span class="token string">&quot;./foo&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// error: Uncaught NotSupportedError: Cannot set &quot;location.pathname&quot;.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="extended-usage"><a class="header-anchor" href="#extended-usage">#</a> Extended Usage</h3><ul><li><code>fetch</code></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run --location https://api.github.com/ --allow-net main.ts</span>\n\n<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;./orgs/denoland&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Fetches &quot;https://api.github.com/orgs/denoland&quot;.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>worker module</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// deno run --location https://example.com/index.html --allow-net main.ts</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;./workers/hello.ts&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Fetches worker module at &quot;https://example.com/workers/hello.ts&quot;.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',9),ln={href:"https://deno.land/manual@v1.9.2/runtime/location_api#only-use-if-necessary",target:"_blank",rel:"noopener noreferrer"},un=(0,p.Uk)("필요할 때만 사용하기"),rn=(0,p.Wm)("h2",{id:"workers"},[(0,p.Wm)("a",{class:"header-anchor",href:"#workers"},"#"),(0,p.Uk)(" Workers")],-1),kn={href:"https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker",target:"_blank",rel:"noopener noreferrer"},dn=(0,p.Uk)("Web Worker API"),mn=(0,p.uE)('<ul><li>현재 <code>&#39;module&#39;</code> 타입만 지원</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Good</span>\n<span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Bad</span>\n<span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;classic&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="instantiation-permissions"><a class="header-anchor" href="#instantiation-permissions">#</a> Instantiation permissions</h3><ul><li>local module: <code>--allow-read</code> 필수</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>\n<span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.ts&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// worker.ts</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nself<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ deno run main.ts\nerror: Uncaught PermissionDenied: <span class="token builtin class-name">read</span> access to <span class="token string">&quot;./worker.ts&quot;</span>, run again with the --allow-read flag\n\n$ deno run --allow-read main.ts\nhello world\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>remote module: <code>--allow-net</code> 필수</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>\n<span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/worker.ts&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// worker.ts (at above address)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nself<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ deno run main.ts\nerror: Uncaught PermissionDenied: net access to <span class="token string">&quot;https://example.com/worker.ts&quot;</span>, run again with the --allow-net flag\n\n$ deno run --allow-net main.ts\nhello world\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="using-deno-in-worker"><a class="header-anchor" href="#using-deno-in-worker">#</a> Using Deno in worker</h3><div class="custom-container warning"><p class="custom-container-title">주의!</p><p>unstable!</p></div><ul><li><code>Deno</code> namespace 는 사용불가 by default <ul><li><code>deno.namespace = true</code> 해주기</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// main.js</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  deno<span class="token operator">:</span> <span class="token punctuation">{</span>\n    namespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filename<span class="token operator">:</span> <span class="token string">&quot;./log.txt&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// worker.js</span>\nself<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> filename <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> Deno<span class="token punctuation">.</span><span class="token function">readTextFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>log.txt</code></li></ul><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>hello world\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ deno run --allow-read --unstable main.js\nhello world\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="specifying-worker-permissions"><a class="header-anchor" href="#specifying-worker-permissions">#</a> Specifying worker permissions</h3><div class="custom-container warning"><p class="custom-container-title">주의!</p><p>unstable!</p></div><ul><li>granular access: <code>true, false</code></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  deno<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">namespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    permissions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      net<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;https://deno.land/&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      read<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./file_1.txt&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./file_2.txt&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      write<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>\n  <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker/worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n    deno<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">namespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      permissions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        read<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">&quot;/home/user/Documents/deno/worker/file_1.txt&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;./worker/file_2.txt&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li><code>&quot;inherit&quot;</code></li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// This worker will inherit its parent permissions</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  deno<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">namespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    permissions<span class="token operator">:</span> <span class="token string">&quot;inherit&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This worker will inherit only the net permissions of its parent</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  deno<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">namespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    permissions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      env<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      hrtime<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      net<span class="token operator">:</span> <span class="token string">&quot;inherit&quot;</span><span class="token punctuation">,</span>\n      plugin<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      read<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      run<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      write<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ul><li>default</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// This worker will inherit its parent permissions</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This worker will inherit all the permissions of its parent BUT net</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  deno<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">namespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    permissions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      net<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>disable the permissions</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// This worker will not have any permissions enabled</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  deno<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">namespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    permissions<span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',30),bn={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",e,[o,(0,p.Wm)(a)]),c]),l,(0,p.Wm)("li",null,[(0,p.Wm)("a",u,[r,i,(0,p.Wm)(a)]),(0,p.Wm)("ul",null,[k,d,m,b,(0,p.Wm)("li",null,[(0,p.Wm)("a",g,[w,(0,p.Wm)(a)])])])])]),h,(0,p.Wm)("ul",null,[y,(0,p.Wm)("li",null,[(0,p.Wm)("a",v,[q,(0,p.Wm)(a)]),f]),(0,p.Wm)("li",null,[(0,p.Wm)("a",W,[x,(0,p.Wm)(a)]),P])]),U,(0,p.Wm)("ul",null,[D,(0,p.Wm)("li",null,[T,E,(0,p.Wm)("a",L,[I,(0,p.Wm)(a)]),R,S])]),_,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",j,[A,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",C,[H,(0,p.Wm)(a)])]),$,F,G]),z,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",B,[O,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",N,[Q,(0,p.Wm)(a)])]),K]),M,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",Y,[J,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",V,[X,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",Z,[nn,(0,p.Wm)(a)])])]),sn,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",an,[pn,(0,p.Wm)(a)])])]),tn,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",en,[on,(0,p.Wm)(a)])])]),cn,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",ln,[un,(0,p.Wm)(a)])])]),rn,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",kn,[dn,(0,p.Wm)(a)])])]),mn],64)}}},4136:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-43f4a0fa",path:"/runtime/deno/the-runtime.html",title:"런타임",lang:"ko-KR",frontmatter:{sidebar:"auto",prev:"./getting-start.md",next:"./external.md"},excerpt:"",headers:[{level:2,title:"Stability",slug:"stability",children:[]},{level:2,title:"Program Lifecycle",slug:"program-lifecycle",children:[]},{level:2,title:"Permission APIs",slug:"permission-apis",children:[{level:3,title:"Permission descriptors",slug:"permission-descriptors",children:[]},{level:3,title:"Query Permissions",slug:"query-permissions",children:[]},{level:3,title:"Permission states",slug:"permission-states",children:[]},{level:3,title:"Permission strength",slug:"permission-strength",children:[]},{level:3,title:"Request Permissions",slug:"request-permissions",children:[]},{level:3,title:"Revoke permissions",slug:"revoke-permissions",children:[]}]},{level:2,title:"Web Platform APIs",slug:"web-platform-apis",children:[{level:3,title:"fetch API",slug:"fetch-api",children:[]},{level:3,title:"CustomEvent, EventTarget and EventListener",slug:"customevent-eventtarget-and-eventlistener",children:[]},{level:3,title:"Other APIs",slug:"other-apis",children:[]},{level:3,title:"타입",slug:"타입",children:[]}]},{level:2,title:"HTTP Server APIs",slug:"http-server-apis",children:[{level:3,title:"Handling connections",slug:"handling-connections",children:[]},{level:3,title:"Serving HTTP",slug:"serving-http",children:[]},{level:3,title:"HTTP Requests and Responses",slug:"http-requests-and-responses",children:[]},{level:3,title:"HTTP/2 Support",slug:"http-2-support",children:[]}]},{level:2,title:"Location API",slug:"location-api",children:[{level:3,title:"Extended Usage",slug:"extended-usage",children:[]}]},{level:2,title:"Workers",slug:"workers",children:[{level:3,title:"Instantiation permissions",slug:"instantiation-permissions",children:[]},{level:3,title:"Using Deno in worker",slug:"using-deno-in-worker",children:[]},{level:3,title:"Specifying worker permissions",slug:"specifying-worker-permissions",children:[]}]}],filePathRelative:"runtime/deno/the-runtime.md",git:{updatedTime:1620521381e3}}}}]);